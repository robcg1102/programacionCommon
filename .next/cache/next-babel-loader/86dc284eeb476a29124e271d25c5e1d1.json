{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\rober\\\\Desktop\\\\rickmorty\\\\pages\\\\characters\\\\[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport Container from '../../components/Container';\nimport Global from \"../../services/Global\";\nimport axios from \"axios\";\n\nvar Character = function Character(props) {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    title: \"Detalle\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"hola \", props.allres.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Character, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Character;\n\nCharacter.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, resultsData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios.get(\"\".concat(Global.url, \"character/\").concat(ctx.query.id));\n\n          case 3:\n            res = _context.sent;\n            resultsData = res.data;\n            return _context.abrupt(\"return\", {\n              allres: resultsData\n            });\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              error: _context.t0\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Character;\n\nvar _c;\n\n$RefreshReg$(_c, \"Character\");","map":{"version":3,"sources":["C:/Users/rober/Desktop/rickmorty/pages/characters/[id].js"],"names":["useRouter","Container","Global","axios","Character","props","router","id","query","allres","name","getInitialProps","ctx","get","url","res","resultsData","data","error"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA;;AACzB,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AADyB,MAEnBO,EAFmB,GAEZD,MAAM,CAACE,KAFK,CAEnBD,EAFmB;AAMzB,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,SAAjB;AAAA,2BACI;AAAA,0BAAUF,KAAK,CAACI,MAAN,CAAaC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CAXD;;GAAMN,S;UACaJ,S;;;KADbI,S;;AAaNA,SAAS,CAACO,eAAV;AAAA,sEAA4B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEJT,KAAK,CAACU,GAAN,WAAaX,MAAM,CAACY,GAApB,uBAAoCF,GAAG,CAACJ,KAAJ,CAAUD,EAA9C,EAFI;;AAAA;AAEhBQ,YAAAA,GAFgB;AAGhBC,YAAAA,WAHgB,GAGFD,GAAG,CAACE,IAHF;AAAA,6CAIf;AAAER,cAAAA,MAAM,EAAEO;AAAV,aAJe;;AAAA;AAAA;AAAA;AAAA,6CAMf;AAAEE,cAAAA,KAAK;AAAP,aANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAWA,eAAed,SAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport Container from '../../components/Container'\r\n\r\nimport Global from \"../../services/Global\";\r\nimport axios from \"axios\";\r\n\r\nconst Character = (props) => {\r\n    const router = useRouter();\r\n    let { id } = router.query;\r\n\r\n\r\n\r\n    return (\r\n        <Container title=\"Detalle\">\r\n            <h2>hola {props.allres.name}</h2>\r\n        </Container>\r\n    )\r\n}\r\n\r\nCharacter.getInitialProps = async (ctx) => {\r\n    try {\r\n      const res = await axios.get(`${Global.url}character/${ctx.query.id}`);\r\n      const resultsData = res.data;\r\n      return { allres: resultsData };\r\n    } catch (error) {\r\n      return { error };\r\n    }\r\n  };\r\n\r\n\r\nexport default Character;"]},"metadata":{},"sourceType":"module"}