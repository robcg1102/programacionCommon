{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\rober\\\\Desktop\\\\rickmorty\\\\pages\\\\episodes.js\";\nimport Container from \"../components/Container\";\nimport Cards from \"../components/Cards\";\nimport Pagination from \"../components/Pagination\";\nimport Global from \"../services/Global\";\nimport axios from \"axios\";\n\nconst Episodes = props => {\n  const {\n    info,\n    results\n  } = props.allres;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    title: \"Episodes\",\n    children: [/*#__PURE__*/_jsxDEV(Cards, {\n      results: results,\n      route: \"episodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      next: info.next,\n      prev: info.prev,\n      route: \"episodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\nEpisodes.getInitialProps = async ctx => {\n  const {\n    page\n  } = ctx.query;\n\n  try {\n    if (ctx.query.page) {\n      const res = await axios.get(`${Global.url}episode?page=${page}`);\n      const resultsData = res.data;\n      return {\n        allres: resultsData\n      };\n    } else {\n      const res = await axios.get(`${Global.url}episode`);\n      const resultsData = res.data;\n      return {\n        allres: resultsData\n      };\n    }\n  } catch (error) {\n    return {\n      error\n    };\n  }\n};\n\nexport default Episodes;","map":{"version":3,"sources":["C:/Users/rober/Desktop/rickmorty/pages/episodes.js"],"names":["Container","Cards","Pagination","Global","axios","Episodes","props","info","results","allres","next","prev","getInitialProps","ctx","page","query","res","get","url","resultsData","data","error"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,KAAK,CAACG,MAAhC;AAEA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,UAAjB;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAED,OAAhB;AAAyB,MAAA,KAAK,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAED,IAAI,CAACG,IAAvB;AAA6B,MAAA,IAAI,EAAEH,IAAI,CAACI,IAAxC;AAA8C,MAAA,KAAK,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CATD;;AAWAN,QAAQ,CAACO,eAAT,GAA2B,MAAOC,GAAP,IAAe;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAWD,GAAG,CAACE,KAArB;;AACA,MAAI;AACF,QAAIF,GAAG,CAACE,KAAJ,CAAUD,IAAd,EAAoB;AAClB,YAAME,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,GAAEd,MAAM,CAACe,GAAI,gBAAeJ,IAAK,EAA5C,CAAlB;AACA,YAAMK,WAAW,GAAGH,GAAG,CAACI,IAAxB;AACA,aAAO;AAAEX,QAAAA,MAAM,EAAEU;AAAV,OAAP;AACD,KAJD,MAIO;AACL,YAAMH,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,GAAEd,MAAM,CAACe,GAAI,SAAxB,CAAlB;AACA,YAAMC,WAAW,GAAGH,GAAG,CAACI,IAAxB;AACA,aAAO;AAAEX,QAAAA,MAAM,EAAEU;AAAV,OAAP;AACD;AACF,GAVD,CAUE,OAAOE,KAAP,EAAc;AACd,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;AACF,CAfD;;AAiBA,eAAehB,QAAf","sourcesContent":["import Container from \"../components/Container\";\r\nimport Cards from \"../components/Cards\";\r\nimport Pagination from \"../components/Pagination\";\r\n\r\nimport Global from \"../services/Global\";\r\nimport axios from \"axios\";\r\n\r\nconst Episodes = (props) => {\r\n  const { info, results } = props.allres;\r\n\r\n  return (\r\n    <Container title=\"Episodes\">\r\n      <Cards results={results} route=\"episodes\" />\r\n      <Pagination next={info.next} prev={info.prev} route=\"episodes\"/>\r\n    </Container>\r\n  );\r\n};\r\n\r\nEpisodes.getInitialProps = async (ctx) => {\r\n  const { page } = ctx.query;\r\n  try {\r\n    if (ctx.query.page) {\r\n      const res = await axios.get(`${Global.url}episode?page=${page}`);\r\n      const resultsData = res.data;\r\n      return { allres: resultsData };\r\n    } else {\r\n      const res = await axios.get(`${Global.url}episode`);\r\n      const resultsData = res.data;\r\n      return { allres: resultsData };\r\n    }\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n};\r\n\r\nexport default Episodes;\r\n"]},"metadata":{},"sourceType":"module"}