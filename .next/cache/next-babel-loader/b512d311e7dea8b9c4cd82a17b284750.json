{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\rober\\\\Desktop\\\\rickmorty\\\\pages\\\\search.js\";\nimport Container from \"../components/Container\";\nimport Cards from \"../components/Cards\";\nimport SearchInput from '../components/SearchInput';\nimport { useRouter } from \"next/router\";\nimport Global from \"../services/Global\";\nimport axios from \"axios\";\n\nconst SearchCharacter = props => {\n  const router = useRouter();\n\n  if (props.allres) {\n    var {\n      info,\n      results\n    } = props.allres;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    title: \"Search Results\",\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), results && /*#__PURE__*/_jsxDEV(Cards, {\n      results: results,\n      route: \"characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 19\n    }, this), !results && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"p-5\",\n      children: [\"Not results with \", props.query]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\nSearchCharacter.getInitialProps = async ctx => {\n  const {\n    name\n  } = ctx.query;\n\n  try {\n    const res = await axios.get(`${Global.url}character/?name=${name}`);\n    const resultsData = res.data;\n    return {\n      allres: resultsData\n    };\n  } catch (error) {\n    return {\n      error\n    };\n  }\n};\n\nexport default SearchCharacter;","map":{"version":3,"sources":["C:/Users/rober/Desktop/rickmorty/pages/search.js"],"names":["Container","Cards","SearchInput","useRouter","Global","axios","SearchCharacter","props","router","allres","info","results","query","getInitialProps","ctx","name","res","get","url","resultsData","data","error"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAMC,MAAM,GAAGL,SAAS,EAAxB;;AAEA,MAAII,KAAK,CAACE,MAAV,EAAkB;AAChB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,KAAK,CAACE,MAA9B;AACD;;AACD,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,gBAAjB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,OAAO,iBAAI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,OAAhB;AAAyB,MAAA,KAAK,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFd,EAGG,CAACA,OAAD,iBAAY;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA,sCAAsCJ,KAAK,CAACK,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,YAHf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAbD;;AAeAN,eAAe,CAACO,eAAhB,GAAkC,MAAOC,GAAP,IAAe;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAWD,GAAG,CAACF,KAArB;;AACA,MAAI;AACF,UAAMI,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,GAAEb,MAAM,CAACc,GAAI,mBAAkBH,IAAK,EAA/C,CAAlB;AACA,UAAMI,WAAW,GAAGH,GAAG,CAACI,IAAxB;AACA,WAAO;AAAEX,MAAAA,MAAM,EAAEU;AAAV,KAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;AACF,CATD;;AAWA,eAAef,eAAf","sourcesContent":["import Container from \"../components/Container\";\r\nimport Cards from \"../components/Cards\";\r\nimport SearchInput from '../components/SearchInput'\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport Global from \"../services/Global\";\r\nimport axios from \"axios\";\r\n\r\nconst SearchCharacter = (props) => {\r\n  const router = useRouter();\r\n\r\n  if (props.allres) {\r\n    var { info, results } = props.allres;\r\n  }\r\n  return (\r\n    <Container title=\"Search Results\">\r\n      <SearchInput />\r\n      {results && <Cards results={results} route=\"characters\" />}\r\n      {!results && <h2 className=\"p-5\">Not results with {props.query}</h2>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nSearchCharacter.getInitialProps = async (ctx) => {\r\n  const { name } = ctx.query;\r\n  try {\r\n    const res = await axios.get(`${Global.url}character/?name=${name}`);\r\n    const resultsData = res.data;\r\n    return { allres: resultsData };\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n};\r\n\r\nexport default SearchCharacter;\r\n"]},"metadata":{},"sourceType":"module"}